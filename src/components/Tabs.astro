---
import styles from '@styles/Tabs.module.scss';
export interface Props extends astroHTML.JSX.HTMLAttributes {}
const props = Astro.props as Props;
const tabs: string[] = [];
const panels: string[] = [];
let inlineStyles = '';
{
    let index = 0;
    const classes: string[] = [];
    Object.entries(Astro.slots).forEach((slot) => {
        const name = slot[0];
        if (name.startsWith('tab')) {
            index += 1;
            tabs.push(name);
            classes.push(
                String(
                    `.${styles.tabs}:has(.${styles.radio}-${index}:checked) ` +
                    `.${styles.panel}-${index}`,
                ),
            );
        }
        if (name.startsWith('panel')) {
            panels.push(name);
        }
    })
    inlineStyles += classes.join(',\n');
}
inlineStyles +=
    ` {` +
    `\n  visibility: visible;\n` +
    `  display: inline-block;\n` +
    `}`;
const uid = crypto.randomUUID();
---

<!--<div class:list={[styles.tabs, 'tabs', props['class:list'], props.class]} >-->
<div class:list={['tabs', props['class:list']]} >
    <!--<style set:html={inlineStyles}></style>-->

    <div class:list={[`${props["tabName"]}-categories`]}>
        <ul class:list={['tabs__tab-list']}>
            {
                tabs.map(async (name, index) => {
                    if (name.startsWith('tab')) {
                        const render = await Astro.slots.render(name);
                        return (
                            <li class:list={['tabs__tab', (index===0 ? "tabs__tab--selected": "")]}
                                id={`${props["tabName"]}-tab-${index}`}
                                data-panel={`${props["tabName"]}-panel-${index}`}
                            >
                                {render}
                            </li>
                        );
                    }
                    return null;
                })
            }
        </ul>
    </div>


    <div class:list={[`${props["tabName"]}-content`]}>
        {
            panels.map(async (name, index) => (
                <div
                    class:list={['tabs__tab-panel', (index===0 ? "tabs__tab-panel--selected" : "")]}
                    id={`${props["tabName"]}-panel-${index}`}
                    data-tab={`${props["tabName"]}-tab-${index}`}
                    set:html={await Astro.slots.render(name)}
                />
            ))
        }
    </div>

</div>